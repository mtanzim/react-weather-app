{"version":3,"sources":["components/Header.js","components/WeatherCards.js","components/StateHistory.js","mock.js","mock2.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","title","react_default","a","createElement","className","WeatherCards","id","data","lineId","Boolean","Object","keys","map","element","key","concat","console","error","JSON","stringify","StateHistory","curState","revertAction","onClick","mockData","coord","lon","lat","weather","main","description","icon","base","temp","pressure","humidity","temp_min","temp_max","visibility","wind","speed","deg","clouds","all","dt","sys","type","message","country","sunrise","sunset","name","cod","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sanitizeDataFunc","timestamp","sanitizedData","filter","requiredDataFilters","includes","reduce","obj","refreshOffline","Promise","resolve","reject","setTimeout","randomNumber","Math","floor","random","data2","offlineDelay","refreshWeather","fetch","city","API_ID","then","res","json","setState","isOffline","errorMessage","String","Date","stateHistory","loading","restartIntervals","catch","err","log","revertState","cardIdCount","refreshTiimer","state","countDown","interval","countDownInterval","_this2","setInterval","_this3","clearInterval","_this4","components_Header","elem","components_StateHistory","components_WeatherCards","Component","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af113a06.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <div className=\"\">\r\n      <h1>{title}</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n// note the conditions checking for improved display\r\n// this can be improved further\r\nconst WeatherCards = ({id, title, data}) => {\r\n\r\n  let lineId = -1;\r\n\r\n  return (\r\n    <div className=\"col-4\">\r\n      <div className=\"card mb-4 mt-4\" >\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{title}</h5>\r\n          <ul>\r\n          {\r\n            Boolean (typeof data === \"object\") ? (Object.keys(data).map(element => {\r\n            lineId ++;\r\n            if (typeof data[element] !== \"object\"){\r\n              return (\r\n                <li key={lineId} id={lineId}>{`${element}: ${data[element]}`}</li>\r\n              )\r\n            } else {\r\n              console.error('Please update the parser for:');\r\n              console.error(JSON.stringify(data[element]));\r\n              return(<li>Error on {element}</li>);\r\n            }\r\n          })) :  (<li>{data}</li>) }\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherCards;","import React from 'react';\r\n\r\nconst StateHistory = ({ curState, revertAction, data }) => {\r\n\r\n  return (\r\n    <ul>\r\n      <div className=\"row\">\r\n        <div className='col-3'><button onClick={revertAction(curState)} className=\"btn-primary\">{curState}</button></div>\r\n        <div className='col-9'>{JSON.stringify(data)}</div>\r\n      </div>\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default StateHistory;","const mockData =  {\r\n  \"coord\": {\r\n    \"lon\": 13.39,\r\n    \"lat\": 52.52\r\n  },\r\n  \"weather\": [{\r\n    \"id\": 800,\r\n    \"main\": \"Clear\",\r\n    \"description\": \"clear sky\",\r\n    \"icon\": \"01d\"\r\n  }],\r\n  \"base\": \"stations\",\r\n  \"main\": {\r\n    \"temp\": 285.64,\r\n    \"pressure\": 1019,\r\n    \"humidity\": 43,\r\n    \"temp_min\": 285.15,\r\n    \"temp_max\": 286.15\r\n  },\r\n  \"visibility\": 10000,\r\n  \"wind\": {\r\n    \"speed\": 3.1,\r\n    \"deg\": 200\r\n  },\r\n  \"clouds\": {\r\n    \"all\": 0\r\n  },\r\n  \"dt\": 1540995600,\r\n  \"sys\": {\r\n    \"type\": 1,\r\n    \"id\": 4892,\r\n    \"message\": 0.003,\r\n    \"country\": \"DE\",\r\n    \"sunrise\": 1540965701,\r\n    \"sunset\": 1541000253\r\n  },\r\n  \"id\": 2950159,\r\n  \"name\": \"Berlin\",\r\n  \"cod\": 200\r\n};\r\n\r\nexport default mockData;","const mockData =  {\r\n  \"coord\": {\r\n    \"lon\": 13.39,\r\n    \"lat\": 52.52\r\n  },\r\n  \"weather\": [{\r\n    \"id\": \"ABC\",\r\n    \"main\": \"Clear\",\r\n    \"description\": \"clear sky\",\r\n    \"icon\": \"01d\"\r\n  }],\r\n  \"base\": \"stations\",\r\n  \"main\": {\r\n    \"temp\": 285.64,\r\n    \"pressure\": 1019,\r\n    \"humidity\": 43,\r\n    \"temp_min\": 285.15,\r\n    \"temp_max\": 286.15\r\n  },\r\n  \"visibility\": 10000,\r\n  \"wind\": {\r\n    \"speed\": 3.1,\r\n    \"deg\": 200\r\n  },\r\n  \"clouds\": {\r\n    \"all\": 0\r\n  },\r\n  \"dt\": 1540995600,\r\n  \"sys\": {\r\n    \"type\": 1,\r\n    \"id\": 4892,\r\n    \"message\": 0.003,\r\n    \"country\": \"DE\",\r\n    \"sunrise\": 1540965701,\r\n    \"sunset\": 1541000253\r\n  },\r\n  \"id\": 2950159,\r\n  \"name\": \"Berlin\",\r\n  \"cod\": 200\r\n};\r\n\r\nexport default mockData;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Header from \"./components/Header\";\nimport WeatherCards from \"./components/WeatherCards\";\nimport StateHistory from \"./components/StateHistory\";\nimport data from \"./mock\";\nimport data2 from \"./mock2\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.cardIdCount = -1;\n    this.stateHistory = {};\n    this.refreshTiimer = 5 * 60 * 1000;\n    this.offlineDelay = 50;\n    this.state = { loading: true, countDown: this.refreshTiimer, isOffline: false, errorMessage:\"\" };\n    this.interval = null;\n    this.countDownInterval = null;\n    this.city = \"Berlin\";\n    this.API_ID = \"82f13ccba8452fb77eab61ee10ce5d53\";\n    // this.API_ID = \"5711f1ec67a15772fe82fbabe951933b\";\n    this.requiredDataFilters = ['main', 'wind', 'weather', 'coord', 'sys'];\n\n  }\n\n\n  componentWillMount() {\n    this.interval = setInterval(() => this.refreshWeather(), this.refreshTiimer);\n    this.countDownInterval = setInterval(() => this.setState((state, props) => state.countDown -= 1000), 1000);\n    this.refreshWeather();\n  }\n\n\n  restartIntervals() {\n    clearInterval(this.interval);\n    clearInterval(this.countDownInterval);\n    this.interval = setInterval(() => this.refreshWeather(), this.refreshTiimer);\n    this.countDownInterval = setInterval(() => this.setState((state, props) => state.countDown -= 1000), 1000);\n    this.setState({\n      countDown: this.refreshTiimer\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    clearInterval(this.countDownInterval);\n\n  }\n  // additional parsing may be implemented here\n  sanitizeDataFunc = (data, timestamp) => {\n    let sanitizedData = Object.keys(data)\n      .filter(key => this.requiredDataFilters.includes(key))\n      .reduce((obj, key) => {\n        if (key === 'weather') {\n          obj[key] = data[key][0] || \"\";\n        } else {\n          obj[key] = data[key];\n        }\n        return obj;\n      }, {});\n\n    sanitizedData[\"timestamp\"] = timestamp;\n    return sanitizedData;\n  }\n\n  //tester with offline mock data\n  // please note the differences between data and data2 (id:800 vs id:ABC)\n  refreshOffline = () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let randomNumber = Math.floor(Math.random() * 6) + 1;\n        if (randomNumber < 3) {\n          resolve(data);\n        } else {\n          resolve(data2);\n        }\n      }, this.offlineDelay);\n    });\n  }\n\n  refreshWeather = () => {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.city}&APPID=${this.API_ID}`)\n      // this.refreshOffline()\n      .then(res => res.json())\n      .then(data => {\n\n        if (data.message) {\n          this.setState({\n            isOffline:true,\n            errorMessage: data.message\n          });\n          return this.refreshOffline();\n        } else {\n          this.setState({ \n            isOffline: false,\n            errorMessage: \"\" \n           });\n          return data;\n        }\n      })\n      .then (data => {\n        // console.log(data);\n        let timestamp = String(+ new Date());\n        let sanitizedData = this.sanitizeDataFunc(data, timestamp);\n        this.stateHistory[timestamp] = sanitizedData;\n        // reset states\n        this.setState({ sanitizedData: sanitizedData, loading: false });\n        this.restartIntervals();\n\n      })\n      .catch(err => console.log(err.message));\n\n  }\n\n\n  revertState = (key) => {\n    return () => {\n      this.setState({\n        sanitizedData: this.stateHistory[key],\n      });\n      this.restartIntervals();\n    }\n  }\n\n\n  render() {\n    return !this.state.loading ? (\n      <div className=\"container\">\n        <div className=\"jumbotron\">\n          <Header title={this.city} />\n          {this.state.isOffline ? (<p>Offline! {this.state.errorMessage}</p>) : (<p>LIVE</p>)}\n          <button className=\"btn-danger\" onClick={this.refreshWeather}>Refresh</button>\n          <p>Refreshing in {Math.floor(this.state.countDown / 1000)} seconds</p>\n        </div>\n        <div className=\"row mt-4 mb-4\">\n          <h5>History</h5>\n        </div>\n        <div className=\"row\">\n          {this.stateHistory &&\n            Object.keys(this.stateHistory).map(elem => {\n              return (<StateHistory key={elem} revertAction={this.revertState} curState={elem} data={this.stateHistory[elem]} />)\n            })\n          }\n\n        </div>\n        <div className=\"row\"><h5>Conditions for {this.state.sanitizedData.timestamp}</h5></div>\n        <div className=\"row\">\n          {Object.keys(this.state.sanitizedData).map(element => {\n            this.cardIdCount++;\n            return (<WeatherCards id={this.cardIdCount} key={this.cardIdCount} title={element} data={this.state.sanitizedData[element]} />)\n          })}\n        </div>\n      </div>\n    ) : (<p>'Loading'</p>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}